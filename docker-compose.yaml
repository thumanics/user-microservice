services:
  # User Microservice
  user-service:
    build:
      context: ./user-microservice
      dockerfile: docker/Dockerfile
    container_name: user-microservice
    ports:
      - "8001:80"
    environment:
      - APP_ENV=local
      - APP_KEY=base64:YourGeneratedKeyHere
      - DB_HOST=user-db
      - DB_DATABASE=user_microservice
      - DB_USERNAME=root
      - DB_PASSWORD=password
      - REDIS_HOST=redis
      - ORDER_SERVICE_URL=http://order-service:8002
      - NOTIFICATION_SERVICE_URL=http://notification-service:8003
    depends_on:
      - user-db
      - redis
    volumes:
      - ./user-microservice:/var/www/html
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # User Database
  user-db:
    image: mysql:8.0
    container_name: user-database
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: user_microservice
      MYSQL_USER: laravel
      MYSQL_PASSWORD: password
    ports:
      - "3301:3306"
    volumes:
      - user_db_data:/var/lib/mysql
      - ./user-microservice/database/init:/docker-entrypoint-initdb.d
    networks:
      - microservices-network
    command: --default-authentication-plugin=mysql_native_password

  # Order Microservice (Placeholder)
  order-service:
    image: nginx:alpine
    container_name: order-microservice
    ports:
      - "8002:80"
    volumes:
      - ./mock-services/order-service.conf:/etc/nginx/nginx.conf
    networks:
      - microservices-network

  # Notification Microservice (Placeholder)  
  notification-service:
    image: nginx:alpine
    container_name: notification-microservice
    ports:
      - "8003:80"
    volumes:
      - ./mock-services/notification-service.conf:/etc/nginx/nginx.conf
    networks:
      - microservices-network

  # Redis for Event Publishing
  redis:
    image: redis:7-alpine
    container_name: microservices-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - microservices-network

  # API Gateway
  api-gateway:
    image: nginx:alpine
    container_name: api-gateway
    ports:
      - "80:80"
    volumes:
      - ./gateway/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - user-service
      - order-service
      - notification-service
    networks:
      - microservices-network

volumes:
  user_db_data:
    driver: local
  redis_data:
    driver: local

networks:
  microservices-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16